import React, { ComponentProps } from 'react';
import { renderToString } from 'react-dom/server';
import RichContentApp from '../../../../examples/main/shared/RichContentApp';
import serialize from 'serialize-javascript';
import TestApp from '../client/TestApp';
import PreviewTestApp from '../client/PreviewTestApp';
import IsolatedTestApp from '../client/IsolatedTestApp';
import RicosTestApp from '../client/RicosTestApp';
import path from 'path';
import { ChunkExtractor } from '@loadable/server';

import '../client/app.css';

export default function renderer() {
  return (req, res) => {
    const [componentId, fixtureName = 'empty'] = req.path.replace(/^\/|\/$/g, '').split(/\/(.+)/);
    const compMap = {
      rce: TestApp,
      'rce-isolated': IsolatedTestApp,
      rcp: PreviewTestApp,
      ricos: RicosTestApp,
    };
    if (Object.keys(compMap).indexOf(componentId) === -1) {
      return res.status(404).send(`Component for ${componentId} not found`);
    }

    const isMobile = req.query.mobile === '';
    const locale = req.query.hebrew === '' ? 'he' : 'en';
    const seoMode = req.query.seoMode === '' ? {} : undefined;
    const testAppConfig = JSON.parse(req.query.testAppConfig || '{}');
    const props: ComponentProps<typeof RichContentApp> = {
      isMobile,
      locale,
      seoMode,
      testAppConfig,
    };

    try {
      props.initialState = require(`../../../tests/fixtures/${fixtureName}.json`);
    } catch (error) {
      console.log(error); //eslint-disable-line no-console
      return res.status(404).send(`Fixture ${fixtureName} not found`);
    }

    const App = compMap[componentId];
    // Loadable
    // This is the stats file generated by webpack loadable plugin
    const statsFile = path.resolve('./dist/loadable-stats.json');
    // We create an extractor from the statsFile
    const extractor = new ChunkExtractor({ statsFile, entrypoints: ['renderer'] });
    const jsx = extractor.collectChunks(<RichContentApp app={App} mode={'test'} {...props} />);
    const scriptTags = extractor.getScriptTags();
    const linkTags = extractor.getLinkTags();
    const styleTags = extractor.getStyleTags();

    res.render('index', {
      html: renderToString(jsx),
      compId: componentId,
      initialState: props.initialState,
      bundleName: 'index',
      isMobile,
      locale,
      testAppConfig,
      serialize,
      loadableScriptTags: scriptTags,
      loadableLinkTags: linkTags,
      loadableStyleTags: styleTags,
    });
  };
}
